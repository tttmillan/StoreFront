@model StoreFront.DATA.EF.Product

@{
    ViewBag.Title = "Create";
}

@*<h2>Create</h2>*@


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="form-horizontal">
            <h4>New Product</h4>
            @*<hr />*@
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProductImage, "ProductImage", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @*@Html.EditorFor("ProductImage", null, htmlAttributes: new { @class = "form-control" })*@
                    <input type="file" name="productImage"/>
                    @Html.ValidationMessageFor(model => model.ProductImage, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BrandID, "BrandID", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.DropDownList("BrandID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BrandID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TypeID, "TypeID", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.DropDownList("TypeID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TypeID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PersonalizedID, "PersonalizedID", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.DropDownList("PersonalizedID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PersonalizedID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsShipped, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsShipped)
                        @Html.ValidationMessageFor(model => model.IsShipped, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeID, "EmployeeID", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.DropDownList("EmployeeID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsOnBackOrder, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsOnBackOrder)
                        @Html.ValidationMessageFor(model => model.IsOnBackOrder, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UnitsSold, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.UnitsSold, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UnitsSold, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ColorID, "ColorID", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.DropDownList("ColorID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ColorID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-6">
                    <input type="submit" value="Create" class="btn btn-outline-primary far fa-plus-square" />
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-outline-primary far fa-caret-square-left" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
